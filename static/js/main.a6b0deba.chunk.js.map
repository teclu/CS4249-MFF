{"version":3,"sources":["serviceWorker.js","components/Ingredient.js","SpecifiedIngredientsTasks.js","components/Logging.js","components/SelectedList.js","components/menu_levels/MenuLevel0.js","components/menu_levels/MenuLevel1.js","components/menu_levels/MenuLevel2.js","components/SpecifiedIngredientsTask.js","Ingredients.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Ingredient","props","handleChange","bind","event","preventDefault","this","handleIngredientSelection","ingredientName","Grid","item","xs","Card","className","onClick","type","id","checked","isSelected","onChange","e","htmlFor","React","Component","SpecifiedIngredientsTasks","JSON","parse","stringify","Logging","startTime","Date","totalClicks","idealClicks","misclicks","specifiedIngredients","categories","handleClickOutside","handleOnClickSendLoggingData","document","addEventListener","removeEventListener","undefined","mTurkWorkerID","ingredientsSpecifiedSelected","selectedList","filter","selectedIngredient","includes","ingredientsSpecifiedNotSelected","ingredientsNotSpecifiedSelected","sort","data","menuLevel","arrangement","Math","abs","length","join","parameters","key","push","encodeURIComponent","Image","src","Button","variant","color","SelectedList","ingredientNames","ingredientNamesToRender","entries","index","ListItem","MenuLevel0","queryStringParameters","queryString","search","Object","Arrangement","Categories","componentsToRender","ingredientIndex","category","ingredients","subcategory","Box","container","spacing","MenuLevel1","handleChangeCategoryTab","newCategory","setState","categoryTabLabelsToRender","componentsInCategoryToRender","categoryIndex","Tab","value","label","ingredientsToRender","hidden","AppBar","position","Tabs","MenuLevel2","handleChangeSubcategoryTab","newSubcategory","subcategoryIndex","subcategoryTabLabelsToRender","componentsInSubcategoryToRender","orientation","SpecifiedIngredientsTask","instructionToRender","random","specifiedIngredient","concat","indexOf","Ingredients","App","selectedListCopy","splice","path","render","ReactDOM","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a6b0deba.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport '../css/components/Ingredient.css';\r\n\r\n/*\r\n * This is the actual Ingredient card that is rendered.\r\n */\r\nclass Ingredient extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    /*\r\n     * Handles the change in Checked and adds/removes the Ingredient from the Selected List.\r\n     */\r\n    handleChange(event) {\r\n      event.preventDefault()\r\n      this.props.handleIngredientSelection(this.props.ingredientName);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid item xs={2} >\r\n                <Card className=\"Ingredient\" onClick={this.handleChange}>\r\n                    <input type=\"checkbox\" id={this.props.id} checked={this.props.isSelected}\r\n                    onChange={e=>{}}/>\r\n                    <label htmlFor={this.props.id}>\r\n                        <span className=\"IngredientCheckbox\">✔</span> <span className=\"IngredientName\">{this.props.ingredientName}</span>\r\n                    </label>\r\n                </Card>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ingredient;\r\n","const SpecifiedIngredientsTasks = JSON.parse(JSON.stringify({\r\n    \"Low_A\": [\r\n        \"Winter Melon\",\r\n        \"Green Onions\",\r\n        \"Green Beans\",\r\n        \"Potatoes\",\r\n        \"Spinach\"\r\n    ],\r\n    \"Low_B\": [\r\n        \"Garlic\",\r\n        \"Carrot\",\r\n        \"Portabello\",\r\n        \"Cauliflower\",\r\n        \"Jalapenos Peppers\"\r\n    ],\r\n    \"Low_C\": [\r\n        \"Lemons\",\r\n        \"Blueberries\",\r\n        \"Watermelon\",\r\n        \"Apples\",\r\n        \"Banana\"\r\n    ],\r\n    \"Low_D\": [\r\n        \"Honeydew Melon\",\r\n        \"Pineapple\",\r\n        \"Cherries\",\r\n        \"Grapefruit\",\r\n        \"Tomatoes\"\r\n    ],\r\n    \"Low_E\": [\r\n        \"Buttermilk\",\r\n        \"Cream Cheese\",\r\n        \"Cream\",\r\n        \"Colby Cheese\",\r\n        \"Condensed Milk\"\r\n    ],\r\n    \"Low_F\": [\r\n        \"Tequila\",\r\n        \"Cola\",\r\n        \"Lemon/Lime Soda\",\r\n        \"Beer\",\r\n        \"Coffee\"\r\n    ],\r\n    \"Low_G\": [\r\n        \"Pork Roast\",\r\n        \"Corned Beef\",\r\n        \"Roast Beef\",\r\n        \"Turkey Breast\",\r\n        \"Ground Pork\"\r\n    ],\r\n    \"Low_H\": [\r\n        \"Gin\",\r\n        \"Ginger Ale\",\r\n        \"Whiskey\",\r\n        \"Tomato Juice\",\r\n        \"Apple Juice\"\r\n    ],\r\n    \"High_A\": [\r\n        \"Pork Chops\",\r\n        \"Raspberries\",\r\n        \"Cucumber\",\r\n        \"Chocolate Milk\",\r\n        \"Diet Cola\"\r\n    ],\r\n    \"High_B\": [\r\n        \"Rum\",\r\n        \"Sweet Potatoes\",\r\n        \"Sliced Chicken\",\r\n        \"Mango\",\r\n        \"Parmesan Cheese\"\r\n    ],\r\n    \"High_C\": [\r\n        \"Pork Tenderloin\",\r\n        \"Peaches\",\r\n        \"Lemonade\",\r\n        \"Whipped Cream\",\r\n        \"Red Peppers\"\r\n    ],\r\n    \"High_D\": [\r\n        \"Black Beans\",\r\n        \"Pears\",\r\n        \"Brandy\",\r\n        \"Chocolate Milk\",\r\n        \"Brisket\"\r\n    ],\r\n    \"High_E\": [\r\n        \"Provelone Cheese\",\r\n        \"Vodka\",\r\n        \"Limes\",\r\n        \"Turkey Legs\",\r\n        \"Scallions\"\r\n    ],\r\n    \"High_F\": [\r\n        \"Instant Coffee\",\r\n        \"Heavy Cream\",\r\n        \"Coconut\",\r\n        \"Turnip\",\r\n        \"Corned Beef\"\r\n    ],\r\n    \"High_G\": [\r\n        \"Bacon\",\r\n        \"Portabello\",\r\n        \"Grapes\",\r\n        \"Lemon/Lime Soda\",\r\n        \"Colby Cheese\"\r\n    ],\r\n    \"High_H\": [\r\n        \"Kale\",\r\n        \"Apricots\",\r\n        \"Chicken Breast\",\r\n        \"Cow Milk\",\r\n        \"Fruit Punch\"\r\n    ]\r\n}));\r\n\r\nexport default SpecifiedIngredientsTasks;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport SpecifiedIngredientsTasks from '../SpecifiedIngredientsTasks.js'\r\n\r\n/*\r\n * This records the background DVs we want to measure and also acts as a sender to the Google Forms.\r\n */\r\nclass Logging extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Initialise data we are going to log.\r\n        this.startTime = new Date();\r\n        this.totalClicks = 0;\r\n        this.idealClicks = 13; // Placeholder Number for now; this has to be manually calculated.\r\n        this.misclicks = -1; // Placeholder Number for now.\r\n        this.specifiedIngredients = SpecifiedIngredientsTasks[this.props.categories];\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n        this.handleOnClickSendLoggingData = this.handleOnClickSendLoggingData.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    /*\r\n     * Listens for mousedown presses and increments the total number of clicks.\r\n     */\r\n    handleClickOutside(event) {\r\n        this.totalClicks++;\r\n    }\r\n\r\n    /*\r\n     * Sends the logged data to the Google Form.\r\n     */\r\n    handleOnClickSendLoggingData(event) {\r\n        // Do not send any logging data if the mTurkWorkerID is null.\r\n        if (this.props.mTurkWorkerID === undefined) {\r\n            return;\r\n        }\r\n\r\n        // Get all the Ingredients that were specified and were selected.\r\n        const ingredientsSpecifiedSelected = this.props.selectedList.filter(selectedIngredient => {\r\n            return this.specifiedIngredients.includes(selectedIngredient);\r\n        });\r\n\r\n        // Get all the Ingredients that were specified but were not selected.\r\n        const ingredientsSpecifiedNotSelected = this.props.selectedList.filter(selectedIngredient => {\r\n            return !this.specifiedIngredients.includes(selectedIngredient);\r\n        });\r\n\r\n        // Get all the ingredients that were not specified and were still selected.\r\n        const ingredientsNotSpecifiedSelected = this.props.selectedList.filter(selectedIngredient => {\r\n            return !this.specifiedIngredients.includes(selectedIngredient);\r\n        });\r\n\r\n        // Sort all ingredient arrays.\r\n        this.specifiedIngredients.sort();\r\n        ingredientsSpecifiedSelected.sort();\r\n        ingredientsSpecifiedNotSelected.sort();\r\n        ingredientsNotSpecifiedSelected.sort();\r\n        console.log(this.specifiedIngredients)\r\n\r\n        const formID = \"e/1FAIpQLSdG-RITTtCGYcO3LowXhT-9MUYrNtDDvrCNK51fDqtbXJpytQ\";\r\n        const data = {\r\n            \"entry.312909528\": this.props.mTurkWorkerID, // mTurkWorkerID\r\n            \"entry.203482683\": this.props.menuLevel, // Menu Level = { 0, 1, 2 }\r\n            \"entry.1431340849\": this.props.arrangement, // Arrangement = { Alphabetical, Common_First }\r\n            \"entry.975941733\": this.props.categories, // Categories = { Low_X, High_X }\r\n            \"entry.1597354442\": (new Date() - this.startTime) / 1000, // Time Taken (s)\r\n            \"entry.3846495\": this.totalClicks, // Total number of Clicks\r\n            \"entry.1622141363\": this.misclicks, // Total number of Misclicks\r\n            \"entry.2000979147\": this.idealClicks, // Ideal Clicks to complete the Task\r\n            \"entry.1814249455\": 100 * (1 - Math.abs(this.totalClicks - this.idealClicks) / this.idealClicks), // Click Efficiency (%)\r\n            \"entry.229369407\": (this.specifiedIngredients.length > 0) ? this.specifiedIngredients.join(', ') : \"None\", // Ingredients Specified in the Task\r\n            \"entry.585530140\": (this.props.selectedList.length > 0) ? this.props.selectedList.join(', ') : \"None\", // Ingredients Selected and Submitted\r\n            \"entry.2093943323\": (ingredientsSpecifiedSelected.length > 0) ? ingredientsSpecifiedSelected.join(', ') : \"None\", // Ingredients Specified that were selected.\r\n            \"entry.108927114\": (ingredientsSpecifiedNotSelected.length > 0) ? ingredientsSpecifiedNotSelected.join(', ') : \"None\",\r\n            \"entry.1280302377\": 100 * (ingredientsSpecifiedSelected.length / this.specifiedIngredients.length), // Ingredients Specified Selected (%).\r\n            \"entry.1304306131\": (ingredientsNotSpecifiedSelected.length > 0) ? ingredientsNotSpecifiedSelected.join(', ') : \"None\", // Ingredients Not Specified that were selected.\r\n            \"entry.44373570\": 100 * ingredientsSpecifiedSelected.length / (this.props.selectedList.length + ingredientsSpecifiedNotSelected.length), // Task Correctness (%)\r\n        };\r\n        const parameters = [];\r\n        for (const key in data) {\r\n            parameters.push(key + \"=\" + encodeURIComponent(data[key]));\r\n        }\r\n        // Submit the form using an image to avoid CORS warnings; warning may still happen, but log will be sent. Go check result in Google Form\r\n        const submitForm = new Image();\r\n        submitForm.src = \"https://docs.google.com/forms/d/\" + formID + \"/formResponse?\" + parameters.join(\"&\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Button variant=\"contained\" color=\"primary\" className=\"SubmitButton\" onClick={this.handleOnClickSendLoggingData}>\r\n                Submit\r\n            </Button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Logging;\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport '../css/components/SelectedList.css';\r\n\r\n/*\r\n * This is where the Names of Selected Ingredients are shown.\r\n */\r\nclass SelectedList extends React.Component {\r\n    render() {\r\n        const ingredientNames = this.props.selectedList;\r\n        const ingredientNamesToRender = [];\r\n\r\n        if (ingredientNames.length > 0) {\r\n            for (const [index, ingredientName] of ingredientNames.entries()) {\r\n                ingredientNamesToRender.push(\r\n                    <ListItem key={index} className=\"SelectedListItem\">&bull; {ingredientName}</ListItem>\r\n                );\r\n            }\r\n        }\r\n        else {\r\n            ingredientNamesToRender.push(\r\n                <ListItem key={0} className=\"SelectedListItem\">None Selected.</ListItem>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Card className=\"SelectedList\">\r\n                <div className=\"SelectedListTitle\">Selected ({ingredientNames.length}):</div>\r\n                {ingredientNamesToRender}\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectedList;\r\n","import React from 'react';\r\nimport queryString from 'query-string'\r\nimport Ingredient from '../Ingredient.js';\r\nimport Logging from '../Logging.js';\r\nimport SelectedList from '../SelectedList.js';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Box from '@material-ui/core/Box';\r\n\r\nclass MenuLevel0 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /*\r\n         * Extract out the query string parameters.\r\n         * Type in: http://localhost:3000/MenuLevel0?Arrangement=Alphabetical&Categories=Low_A&mTurkWorkerID=ABC\r\n         * Expected: Alphabetical, Low_A, ABC\r\n         */\r\n        const queryStringParameters = queryString.parse(this.props.location.search);\r\n        if (Object.entries(queryStringParameters).length !== 0) {\r\n            this.arrangement = queryStringParameters.Arrangement;\r\n            this.categories = queryStringParameters.Categories;\r\n            this.mTurkWorkerID = queryStringParameters.mTurkWorkerID;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const componentsToRender = [];\r\n        let ingredientIndex = 0;\r\n\r\n        // Create the Ingredient Components at the 0-Level\r\n        for (const category in this.props.ingredients) {\r\n            // First we create the Category title.\r\n            componentsToRender.push(\r\n                <div key={category} className=\"CategoryTitle\">{category}</div>\r\n            );\r\n\r\n            // Then we simply add all the ingredients under that Category.\r\n            for (const subcategory in this.props.ingredients[category]) {\r\n                for (const ingredientName of this.props.ingredients[category][subcategory]) {\r\n                    componentsToRender.push(\r\n                        <Ingredient key={ingredientIndex} ingredientName={ingredientName} id={ingredientIndex} isSelected={this.props.selectedList.includes(ingredientName)} handleIngredientSelection={this.props.handleIngredientSelection.bind(this)} />\r\n                    );\r\n                    ingredientIndex++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Box>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={10}>\r\n                        <Grid container spacing={1}>\r\n                            {componentsToRender}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <SelectedList selectedList={this.props.selectedList} />\r\n                        <Logging mTurkWorkerID={this.mTurkWorkerID} selectedList={this.props.selectedList} menuLevel={0} arrangement={this.arrangement} categories={this.categories} />\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuLevel0;\r\n","import React from 'react';\r\nimport queryString from 'query-string'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Ingredient from '../Ingredient';\r\nimport Logging from '../Logging.js';\r\nimport SelectedList from '../SelectedList.js';\r\n\r\nclass MenuLevel1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            category: \"Vegetables\"\r\n        };\r\n\r\n        /*\r\n         * Extract out the query string parameters.\r\n         * Type in: http://localhost:3000/MenuLevel0?Arrangement=Alphabetical&Categories=Low_A&mTurkWorkerID=ABC\r\n         * Expected: Alphabetical, Low_A, ABC\r\n         */\r\n        const queryStringParameters = queryString.parse(this.props.location.search);\r\n        if (Object.entries(queryStringParameters).length !== 0) {\r\n            this.arrangement = queryStringParameters.Arrangement;\r\n            this.categories = queryStringParameters.Categories;\r\n            this.mTurkWorkerID = queryStringParameters.mTurkWorkerID;\r\n        }\r\n\r\n        this.handleChangeCategoryTab = this.handleChangeCategoryTab.bind(this);\r\n    }\r\n\r\n    /*\r\n     * Handles the change in Category and shows the correct Category content.\r\n     */\r\n    handleChangeCategoryTab(event, newCategory) {\r\n        this.setState(state => {\r\n            return { category: newCategory }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const categoryTabLabelsToRender = [];\r\n        const componentsInCategoryToRender = [];\r\n        let categoryIndex = 0;\r\n        let ingredientIndex = 0;\r\n\r\n        // Create the Ingredient Components at the 1-Level\r\n        for (const category in this.props.ingredients) {\r\n            // First we create the Category Tab.\r\n            categoryTabLabelsToRender.push(\r\n                <Tab key={categoryIndex} value={category} index={category} label={category} />\r\n            );\r\n\r\n            if (category === this.state.category){\r\n              // Then we get all the Ingredients under that Category.\r\n              const ingredientsToRender = [];\r\n              for (const subcategory in this.props.ingredients[category]) {\r\n                  for (const ingredientName of this.props.ingredients[category][subcategory]) {\r\n                      ingredientsToRender.push(\r\n                          <Ingredient key={ingredientIndex} ingredientName={ingredientName} id={ingredientIndex} isSelected={this.props.selectedList.includes(ingredientName)} handleIngredientSelection={this.props.handleIngredientSelection.bind(this)} hidden={this.state.category !== category} />\r\n                      )\r\n                      ingredientIndex++;\r\n                  }\r\n              }\r\n\r\n              // Finally we add all Ingredients to the Category content; this only gets shown if we click the Category Tab.\r\n              componentsInCategoryToRender.push(\r\n                  <div className=\"CategoryTab\" key={categoryIndex} value={category} index={category} hidden={this.state.category !== category}>\r\n                      <Grid container spacing={1}>\r\n                          <div className=\"CategoryTitle\">{category}</div>\r\n                          {ingredientsToRender}\r\n                      </Grid>\r\n                  </div>\r\n              );\r\n          }\r\n            categoryIndex++;\r\n        }\r\n\r\n        return (\r\n            <Box>\r\n                <AppBar position=\"fixed\">\r\n                    <Tabs value={this.state.category} onChange={this.handleChangeCategoryTab}>\r\n                        {categoryTabLabelsToRender}\r\n                    </Tabs>\r\n                </AppBar>\r\n                <div className=\"AppBarOffset\"></div>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={10}>\r\n                        {componentsInCategoryToRender}\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <SelectedList selectedList={this.props.selectedList} />\r\n                        <Logging mTurkWorkerID={this.mTurkWorkerID} selectedList={this.props.selectedList} menuLevel={1} arrangement={this.arrangement} categories={this.categories} />\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuLevel1;\r\n","import React from 'react';\r\nimport queryString from 'query-string'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Ingredient from '../Ingredient.js';\r\nimport Logging from '../Logging.js';\r\nimport SelectedList from '../SelectedList.js';\r\n\r\nclass MenuLevel2 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            category: \"Vegetables\",\r\n            subcategory: false\r\n        };\r\n\r\n        /*\r\n         * Extract out the query string parameters.\r\n         * Type in: http://localhost:3000/MenuLevel0?Arrangement=Alphabetical&Categories=Low_A&mTurkWorkerID=ABC\r\n         * Expected: Alphabetical, Low_A, ABC\r\n         */\r\n        const queryStringParameters = queryString.parse(this.props.location.search);\r\n        if (Object.entries(queryStringParameters).length !== 0) {\r\n            this.arrangement = queryStringParameters.Arrangement;\r\n            this.categories = queryStringParameters.Categories;\r\n            this.mTurkWorkerID = queryStringParameters.mTurkWorkerID;\r\n        }\r\n\r\n        this.handleChangeCategoryTab = this.handleChangeCategoryTab.bind(this);\r\n        this.handleChangeSubcategoryTab = this.handleChangeSubcategoryTab.bind(this);\r\n    }\r\n\r\n    /*\r\n     * Handles the change in Category and shows the correct Category content.\r\n     */\r\n    handleChangeCategoryTab(event, newCategory) {\r\n        this.setState(state => {\r\n            return {\r\n                category: newCategory,\r\n                subcategory: false\r\n            }\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Handles the change in Subategory and shows the correct subcategory content.\r\n     */\r\n    handleChangeSubcategoryTab(event, newSubcategory) {\r\n        this.setState(state => {\r\n            return { subcategory: newSubcategory }\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        let categoryIndex = 0;\r\n        let subcategoryIndex = 0;\r\n        let ingredientIndex = 0;\r\n\r\n        const categoryTabLabelsToRender = [];\r\n        const componentsInCategoryToRender = [];\r\n        // Create the Ingredient Components at the 1-Level\r\n        for (const category in this.props.ingredients) {\r\n            // First we create the Category Tab.\r\n            categoryTabLabelsToRender.push(\r\n                <Tab key={categoryIndex} value={category} index={category} label={category} />\r\n            );\r\n\r\n          if (category === this.state.category){\r\n            const subcategoryTabLabelsToRender = [];\r\n            const componentsInSubcategoryToRender = [];\r\n            // We get all the subcategories under the Category\r\n            for (const subcategory in this.props.ingredients[category]) {\r\n              subcategoryTabLabelsToRender.push(\r\n                  <Tab key={subcategoryIndex} value={subcategory} index={subcategory} label={subcategory} />\r\n              )\r\n              if(subcategory === this.state.subcategory){\r\n                  const ingredientsToRender = [];\r\n                  // Then we get all the Ingredients under that Subategory.\r\n                    for (const ingredientName of this.props.ingredients[category][subcategory]) {\r\n                        ingredientsToRender.push(\r\n                            <Ingredient key={ingredientIndex} ingredientName={ingredientName} id={ingredientIndex} isSelected={this.props.selectedList.includes(ingredientName)} handleIngredientSelection={this.props.handleIngredientSelection.bind(this)} hidden={this.state.subcategory !== subcategory} />\r\n                        )\r\n                        ingredientIndex++;\r\n                    }\r\n\r\n                    componentsInSubcategoryToRender.push(\r\n                        <div className=\"SubcategoryTab\" key={subcategoryIndex} value={subcategory} index={subcategory} hidden={this.state.subcategory !== subcategory}>\r\n                            <Grid container spacing={1}>\r\n                                <div className=\"CategoryTitle\">{subcategory}</div>\r\n                                {ingredientsToRender}\r\n                            </Grid>\r\n                        </div>\r\n                    );\r\n              }\r\n                subcategoryIndex++;\r\n            }\r\n\r\n            // Finally we add all Ingredients to the Category content; this only gets shown if we click the Category Tab.\r\n              componentsInCategoryToRender.push(\r\n                <div className=\"CategoryTab\" key={categoryIndex} value={category} index={category} hidden={this.state.category !== category}>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs ={3}>\r\n                            <Tabs orientation=\"vertical\" value={this.state.subcategory} onChange={this.handleChangeSubcategoryTab}>\r\n                                {subcategoryTabLabelsToRender}\r\n                            </Tabs>\r\n                        </Grid>\r\n                        <Grid item xs ={9}>\r\n                            {componentsInSubcategoryToRender}\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            );\r\n        }\r\n        categoryIndex++;\r\n      }\r\n\r\n        return (\r\n            <Box>\r\n                <AppBar position=\"fixed\">\r\n                    <Tabs value={this.state.category} onChange={this.handleChangeCategoryTab}>\r\n                        {categoryTabLabelsToRender}\r\n                    </Tabs>\r\n                </AppBar>\r\n                <div className=\"AppBarOffset\"></div>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={10}>\r\n                        {componentsInCategoryToRender}\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <SelectedList selectedList={this.props.selectedList} />\r\n                        <Logging mTurkWorkerID={this.mTurkWorkerID} selectedList={this.props.selectedList} menuLevel={2} arrangement={this.arrangement} categories={this.categories} />\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuLevel2;\r\n","import React from 'react';\r\nimport queryString from 'query-string'\r\nimport Box from '@material-ui/core/Box';\r\nimport SpecifiedIngredientsTasks from '../SpecifiedIngredientsTasks.js'\r\n\r\n/*\r\n * This records the background DVs we want to measure and also acts as a sender to the Google Forms.\r\n * Type in: http://localhost:3000/InstructionTask?Categories=Low_B\r\n * Expected: Select the following ingredients: Garlic, Carrot, Portabello, Cauliflower, Jalapenos Peppers.\r\n */\r\nclass SpecifiedIngredientsTask extends React.Component {\r\n    render() {\r\n        const queryStringParameters = queryString.parse(this.props.location.search);\r\n        const specifiedIngredients = SpecifiedIngredientsTasks[queryStringParameters.Categories];\r\n        let instructionToRender = \"Select the following ingredients: \";\r\n\r\n        // Randomise the Ingredients' order.\r\n        specifiedIngredients.sort(() => Math.random() - 0.5);\r\n\r\n        // Append the Ingredients to the instruction string.\r\n        for (const specifiedIngredient of specifiedIngredients) {\r\n            instructionToRender = instructionToRender.concat(specifiedIngredient);\r\n            if (specifiedIngredients.indexOf(specifiedIngredient) !== specifiedIngredients.length - 1) {\r\n                instructionToRender = instructionToRender.concat(', ');\r\n            }\r\n            else {\r\n                instructionToRender = instructionToRender.concat('.');\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Box>\r\n                {instructionToRender}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SpecifiedIngredientsTask;","const Ingredients = JSON.parse(JSON.stringify({\r\n    \"Vegetables\": {\r\n        \"Allium/Bulbs\": [\r\n            \"Garlic\",\r\n            \"Green Onions\",\r\n            \"Shallots\",\r\n            \"Scallions\",\r\n            \"Spring Onion\"\r\n        ],\r\n        \"Leafy Greens\": [\r\n            \"Bok Choy\",\r\n            \"Spinach\",\r\n            \"Lettuce\",\r\n            \"Brussel Sprouts\",\r\n            \"Cabbage\",\r\n            \"Kale\"\r\n        ],\r\n        \"Flowers\": [\r\n            \"Artichokes\",\r\n            \"Broccoli\",\r\n            \"Cauliflower\"\r\n        ],\r\n        \"Marrow/Gourds\": [\r\n            \"Bitter Gourd\",\r\n            \"Winter Melon\",\r\n            \"Cucumber\",\r\n            \"Butternut Squash\",\r\n            \"Eggplant\",\r\n            \"Pumpkin\",\r\n            \"Zucchini\"\r\n        ],\r\n        \"Legumes/Seeds\": [\r\n            \"Sweet Corn\",\r\n            \"Green Beans\",\r\n            \"French Beans\",\r\n            \"Long Beans\",\r\n            \"Peas\",\r\n            \"Snow Peas\",\r\n            \"Black Beans\",\r\n            \"Chickpea Beans\",\r\n            \"Kidney Beans\",\r\n            \"Lima Beans\"\r\n        ],\r\n        \"Peppers\": [\r\n            \"Red Chilis\",\r\n            \"Green Chilis\",\r\n            \"Green Peppers\",\r\n            \"Jalapenos Peppers\",\r\n            \"Red Peppers\",\r\n            \"Yellow Peppers\"\r\n        ],\r\n        \"Roots\": [\r\n            \"Beetroot\",\r\n            \"Carrot\",\r\n            \"Turnip\",\r\n            \"Daikon\",\r\n            \"Radish\"\r\n        ],\r\n        \"Stems\": [\r\n            \"Asparagus\",\r\n            \"Celery\"\r\n        ],\r\n        \"Tubers\": [\r\n            \"Potatoes\",\r\n            \"Sweet Potatoes\",\r\n            \"Yam\"\r\n        ],\r\n        \"Fungi\": [\r\n            \"Button White\",\r\n            \"Swiss Brown\",\r\n            \"Enoki\",\r\n            \"Oyster\",\r\n            \"Portabello\",\r\n            \"Shiitake\",\r\n            \"Truffle\"\r\n        ]\r\n    },\r\n    \"Fruits\": {\r\n        \"Apples and Pears\": [\r\n            \"Apples\",\r\n            \"Pears\"\r\n        ],\r\n        \"Citrus\": [\r\n            \"Grapefruit\",\r\n            \"Lemons\",\r\n            \"Limes\",\r\n            \"Oranges\"\r\n        ],\r\n        \"Stone Fruits\": [\r\n            \"Apricots\",\r\n            \"Peaches\",\r\n            \"Plums\",\r\n            \"Black Olives\",\r\n            \"Green Olives\"\r\n        ],\r\n        \"Tropical/Exotic\": [\r\n            \"Avocado\",\r\n            \"Banana\",\r\n            \"Coconut\",\r\n            \"Mango\",\r\n            \"Pineapple\"\r\n        ],\r\n        \"Berries\": [\r\n            \"Cherries\",\r\n            \"Cranberries\",\r\n            \"Grapes\",\r\n            \"Strawberries\",\r\n            \"Blueberries\",\r\n            \"Mulberries\",\r\n            \"Raspberries\"\r\n        ],\r\n        \"Melons\": [\r\n            \"Honeydew Melon\",\r\n            \"Rock Melon\",\r\n            \"Watermelon\"\r\n        ],\r\n        \"Tomatoes\": [\r\n            \"Cherry Tomatoes\",\r\n            \"Tomatoes\"\r\n        ]\r\n    },\r\n    \"Dairy\": {\r\n        \"Cheese\": [\r\n            \"Blue Cheese\",\r\n            \"Cheddar Cheese\",\r\n            \"Colby Cheese\",\r\n            \"Cream Cheese\",\r\n            \"Feta Cheese\",\r\n            \"Goat Cheese\",\r\n            \"Monteray jack Cheese\",\r\n            \"Mozzarella Cheese\",\r\n            \"Parmesan Cheese\",\r\n            \"Provelone Cheese\",\r\n            \"Ricotta Cheese\",\r\n            \"Romano Cheese\",\r\n            \"Swiss Cheese\"\r\n        ],\r\n        \"Cream\": [\r\n            \"Cream\",\r\n            \"Heavy Cream\",\r\n            \"Sour Cream\",\r\n            \"Whipped Cream\"\r\n        ],\r\n        \"Milk\": [\r\n            \"Cow Milk\",\r\n            \"Buttermilk\",\r\n            \"Chocolate Milk\",\r\n            \"Condensed Milk\",\r\n            \"Evaporated Milk\",\r\n            \"Half and Half\"\r\n        ]\r\n    },\r\n    \"Meats\": {\r\n        \"Beef\": [\r\n            \"Brisket\",\r\n            \"Corned Beef\",\r\n            \"Ground Beef\",\r\n            \"Ground Veal\",\r\n            \"Roast Beef\",\r\n            \"Steak\"\r\n        ],\r\n        \"Poultry\": [\r\n            \"Canned Chicken\",\r\n            \"Chicken Breast\",\r\n            \"Sliced Chicken\",\r\n            \"Turkey Breast\",\r\n            \"Turkey Legs\"\r\n        ],\r\n        \"Pork\": [\r\n            \"Bacon\",\r\n            \"Ground Pork\",\r\n            \"Ham\",\r\n            \"Pepperoni\",\r\n            \"Pork Chops\",\r\n            \"Pork Roast\",\r\n            \"Pork Tenderloin\",\r\n            \"Prosciutto\",\r\n            \"Salami\"\r\n        ]\r\n    },\r\n    \"Beverages\": {\r\n        \"Liquor\": [\r\n            \"Apple Cider\",\r\n            \"Club/Tonic\",\r\n            \"Baileys\",\r\n            \"Beer\",\r\n            \"Brandy\",\r\n            \"Gin\",\r\n            \"Kahlua\",\r\n            \"Pale Ale (e.g. Amberbock)\",\r\n            \"Rum\",\r\n            \"Stout\",\r\n            \"Tequila\",\r\n            \"Vodka\",\r\n            \"Whiskey\"\r\n        ],\r\n        \"Juice\": [\r\n            \"Apple Juice\",\r\n            \"Lemonade\",\r\n            \"Orange Juice\",\r\n            \"Pineapple Juice\",\r\n            \"Tomato Juice\"\r\n        ],\r\n        \"Soft Drinks\": [\r\n            \"Cola\",\r\n            \"Diet Cola\",\r\n            \"Fruit Punch\",\r\n            \"Ginger Ale\",\r\n            \"Lemon/Lime Soda\"\r\n        ],\r\n        \"Coffee\": [\r\n            \"Coffee\",\r\n            \"Instant Coffee\"\r\n        ]\r\n    }\r\n}));\r\n\r\nexport default Ingredients;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport MenuLevel0 from './components/menu_levels/MenuLevel0.js';\r\nimport MenuLevel1 from './components/menu_levels/MenuLevel1.js';\r\nimport MenuLevel2 from './components/menu_levels/MenuLevel2.js';\r\nimport SpecifiedIngredientsTask from './components/SpecifiedIngredientsTask.js';\r\nimport './css/App.css';\r\nimport Ingredients from './Ingredients.js';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ingredients = Ingredients; // Import the Ingredients JSON File.\r\n        this.state = {\r\n            selectedList: [] // This keeps track of all the selected Ingredients' Names.\r\n        }\r\n    }\r\n\r\n    /*\r\n     * This function is passed down to any Ingredient so that it can modify the SelectedList.\r\n     */\r\n    handleIngredientSelection(ingredientName) {\r\n        const isSelected = this.state.selectedList.includes(ingredientName)\r\n        this.setState(state => {\r\n            const selectedListCopy = state.selectedList;\r\n\r\n            // If an Ingredient has been Selected, push its Name onto the SelectedList and sort it alphabetically.\r\n            if (!isSelected) {\r\n                selectedListCopy.push(ingredientName);\r\n                selectedListCopy.sort();\r\n            }\r\n            // Else we remove the Ingredient's Name from the SelectedList.\r\n            else {\r\n                selectedListCopy.splice(selectedListCopy.indexOf(ingredientName), 1);\r\n            }\r\n            // Finally, return the modified SelectedList.\r\n            return { selectedList: selectedListCopy }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/\" render={(props) => <MenuLevel0 {...props} ingredients={this.ingredients} selectedList={this.state.selectedList} handleIngredientSelection={this.handleIngredientSelection.bind(this)} />} />\r\n                    <Route path=\"/MenuLevel1\" render={(props) => <MenuLevel1 {...props} ingredients={this.ingredients} selectedList={this.state.selectedList} handleIngredientSelection={this.handleIngredientSelection.bind(this)} />} />\r\n                    <Route path=\"/MenuLevel2\" render={(props) => <MenuLevel2 {...props} ingredients={this.ingredients} selectedList={this.state.selectedList} handleIngredientSelection={this.handleIngredientSelection.bind(this)} />} />\r\n                    <Route path=\"/InstructionTask\" render={(props => <SpecifiedIngredientsTask {...props} />)} />\r\n                </Switch>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App.js';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport './css/index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}