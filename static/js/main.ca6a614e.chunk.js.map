{"version":3,"sources":["serviceWorker.js","actions.js","reducers.js","components/Ingredient.js","SpecifiedIngredientsTasks.js","components/Logging.js","components/SelectedList.js","components/menu_levels/MenuLevel0.js","components/menu_levels/MenuLevel1.js","components/menu_levels/MenuLevel2.js","components/SpecifiedIngredientsTask.js","Ingredients.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ADD_TO_SELECTED","REMOVE_FROM_SELECTED","selectList","action","type","concat","ingredient","newState","slice","splice","indexOf","Ingredient","props","handleChange","bind","isSelected","store","getState","includes","ingredientName","this","setState","dispatch","removeFromSelected","Grid","item","xs","isMenuLevel2","Card","id","onClick","CardContent","style","background","color","fontWeight","className","React","Component","SpecifiedIngredientsTasks","JSON","parse","stringify","Logging","startTime","Date","totalClicks","menuLevel","idealClicks","category_set","misclicks","specifiedIngredients","handleClickOutside","handleOnClickSendLoggingData","submitted","document","addEventListener","removeEventListener","event","handleSubmitButtonClick","selectedList","undefined","mTurkWorkerID","ingredientsSpecifiedSelected","filter","selectedIngredient","ingredientsSpecifiedNotSelected","ingredientsNotSpecifiedSelected","sort","data","arrangement","Math","abs","length","join","parameters","key","push","encodeURIComponent","Image","src","Button","variant","disabled","SelectedList","ingredientNames","ingredientNamesToRender","entries","index","ListItem","connect","MenuLevel0","queryStringParameters","queryString","search","Object","Arrangement","Categories","categories","keys","ingredients","InstructionModalOpen","SubmitModalOpen","componentsToRender","ingredientIndex","category","ingredientsPerCategory","subcategory","Box","Modal","open","marginBottom","handleStartButtonClick","container","spacing","position","width","MenuLevel1","handleChangeCategoryTab","newCategory","categoryTabLabelsToRender","componentsInCategoryToRender","categoryIndex","Tab","minWidth","value","label","ingredientsToRender","hidden","AppBar","Tabs","TabIndicatorProps","onChange","MenuLevel2","anchorEl","handleChangeSubcategory","handleMenuClose","currentTarget","newSubcategory","subcategoryIndex","subcategoryMenus","subcategoryMenuItems","componentsInSubcategoryToRender","subcategories","MenuItem","height","Menu","getContentAnchorEl","onClose","anchorOrigin","vertical","horizontal","transformOrigin","SpecifiedIngredientsTask","instructionToRender","random","specifiedIngredient","href","rel","Ingredients","createStore","App","e","keyCode","ctrlKey","keycode","preventDefault","basename","process","path","render","ReactDOM","getElementById","URL","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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I,kBAAChD,EAAA,EAAD,CAAKxE,UAAU,uBACX,0BAAMyH,KAAK,+DAA+DC,IAAI,eAC7EJ,O,GAlBsBrH,IAAMC,YCkQ9ByH,G,MA7QKvH,KAAKC,MAAMD,KAAKE,UAAU,CAC1C,WAAc,CACV,eAAgB,CACZ,WACA,UACA,UACA,kBACA,UACA,QAEJ,QAAW,CACP,aACA,WACA,eAEJ,gBAAiB,CACb,eACA,eACA,WACA,mBACA,WACA,UACA,YAEJ,gBAAiB,CACb,aACA,cACA,eACA,aACA,OACA,YACA,cACA,iBACA,eACA,cAEJ,QAAW,CACP,aACA,eACA,gBACA,oBACA,cACA,kBAEJ,2BAA4B,CACxB,WACA,SACA,SACA,SACA,SACA,eACA,WACA,WACA,SACA,iBACA,OAEJ,MAAS,CACL,wBACA,uBACA,iBACA,kBACA,sBACA,oBACA,qBAGR,OAAU,CACN,mBAAoB,CAChB,SACA,SAEJ,OAAU,CACN,aACA,SACA,QACA,WAEJ,eAAgB,CACZ,WACA,UACA,QACA,eACA,gBAEJ,SAAY,CACR,UACA,SACA,UACA,QACA,aAEJ,QAAW,CACP,WACA,cACA,SACA,eACA,cACA,aACA,eAEJ,OAAU,CACN,iBACA,aACA,cAEJ,SAAY,CACR,kBACA,aAGR,MAAS,CACL,OAAU,CACN,cACA,iBACA,eACA,eACA,cACA,cACA,uBACA,oBACA,kBACA,mBACA,iBACA,gBACA,gBAEJ,MAAS,CACL,QACA,cACA,aACA,iBAEJ,KAAQ,CACJ,WACA,aACA,iBACA,iBACA,kBACA,kBAGR,MAAS,CACL,KAAQ,CACJ,UACA,cACA,cACA,cACA,aACA,SAEJ,QAAW,CACP,iBACA,iBACA,iBACA,gBACA,eAEJ,KAAQ,CACJ,QACA,cACA,MACA,YACA,aACA,aACA,kBACA,aACA,WAGR,QAAW,CACP,KAAQ,CACJ,cACA,UACA,MACA,UACA,SACA,UACA,QAEJ,YAAe,CACX,WACA,OACA,UACA,SACA,UAEJ,iBAAkB,CACd,QACA,UACA,UACA,UACA,WACA,UAGR,MAAS,CACL,aAAc,CACV,SACA,aACA,aACA,UACA,eACA,aACA,aAEJ,gBAAiB,CACb,mBACA,eACA,cACA,uBACA,qBACA,UACA,gBACA,gBACA,mBAEJ,MAAS,CACL,SACA,OACA,aACA,kBACA,aACA,eACA,gBACA,aACA,iBACA,YACA,oBACA,gBAGR,UAAa,CACT,OAAU,CACN,cACA,aACA,UACA,OACA,SACA,MACA,SACA,WACA,MACA,QACA,UACA,QACA,WAEJ,MAAS,CACL,cACA,WACA,eACA,kBACA,gBAEJ,cAAe,CACX,OACA,YACA,cACA,aACA,mBAEJ,OAAU,CACN,SACA,uBC7PN1B,EAAQgJ,YAAY9J,GA4BX+J,E,YAzBX,WAAYrJ,GAAQ,IAAD,8BACf,4CAAMA,KACDwF,YAAc2D,EAFJ,E,sEAKT,IAAD,OAOL,OANAvL,OAAOgF,iBAAiB,WAAW,SAAU0G,IACvB,MAAdA,EAAEC,SAAiC,MAAdD,EAAEC,SAAoBD,EAAEE,UAA0B,KAAdF,EAAEC,SAAgC,KAAdD,EAAEG,WAC/EH,EAAEI,oBAKN,kBAAC,IAAD,CAAQC,SAAUC,eACd,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,cAAcC,OAAQ,SAAC9J,GAAD,OAAW,kBAAC,EAAD,iBAAgBA,EAAhB,CAAuBI,MAAOA,EAAOoF,YAAa,EAAKA,kBACpG,kBAAC,IAAD,CAAOqE,KAAK,cAAcC,OAAQ,SAAC9J,GAAD,OAAW,kBAAC,EAAD,iBAAgBA,EAAhB,CAAuBI,MAAOA,EAAOoF,YAAa,EAAKA,kBACpG,kBAAC,IAAD,CAAOqE,KAAK,cAAcC,OAAQ,SAAC9J,GAAD,OAAW,kBAAC,EAAD,iBAAgBA,EAAhB,CAAuBI,MAAOA,EAAOoF,YAAa,EAAKA,kBACpG,kBAAC,IAAD,CAAOqE,KAAK,mBAAmBC,OAAS,SAAA9J,GAAK,OAAI,kBAAC,EAA6BA,Y,GAnBjFyB,IAAMC,W,MCNxBqI,IAASD,OAAO,kBAAC,EAAD,MAASnH,SAASqH,eAAe,Sbe1C,SAAkB9L,GACrB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAI8L,IAAIL,cAAwBhM,OAAOC,SAASoL,MACpDiB,SAAWtM,OAAOC,SAASqM,OAIrC,OAGJtM,OAAOgF,iBAAiB,QAAQ,WAC5B,IAAM3E,EAAK,UAAM2L,cAAN,sBAEPlM,IAgEhB,SAAiCO,EAAOC,GAEpCiM,MAAMlM,GACDK,MAAK,SAAA8L,GAEF,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEjB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYvK,QAAQ,cAG5C3B,UAAUC,cAAcqM,MAAMnM,MAAK,SAAAC,GAC/BA,EAAamM,aAAapM,MAAK,WAC3BV,OAAOC,SAAS8M,eAKxB3M,EAAgBC,EAAOC,MAG9BgB,OAAM,WACHJ,QAAQC,IACJ,oEArFA6L,CAAwB3M,EAAOC,GAI/BC,UAAUC,cAAcqM,MAAMnM,MAAK,WAC/BQ,QAAQC,IACJ,iHAMRf,EAAgBC,EAAOC,OatCvCE,K","file":"static/js/main.ca6a614e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","// Action types\r\nexport const ADD_TO_SELECTED = 'ADD_TO_SELECTED';\r\nexport const REMOVE_FROM_SELECTED = 'REMOVE_FROM_SELECTED';\r\n\r\n// Action creators\r\nexport function addToSelected(ingredient) {\r\n  return { type: ADD_TO_SELECTED, ingredient };\r\n}\r\n\r\nexport function removeFromSelected(ingredient) {\r\n  return { type: REMOVE_FROM_SELECTED, ingredient };\r\n}","import { \r\n  ADD_TO_SELECTED,\r\n  REMOVE_FROM_SELECTED,\r\n} from './actions';\r\n\r\nconst selectList = (state = [], action) => {\r\n  // Treat states as immutable\r\n  switch (action.type) {\r\n    case ADD_TO_SELECTED: \r\n      return state.concat([action.ingredient]);\r\n    case REMOVE_FROM_SELECTED:\r\n      let newState = state.slice();\r\n      newState.splice(newState.indexOf(action.ingredient), 1);\r\n      return newState;\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default selectList;","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {\r\n    addToSelected,\r\n    removeFromSelected,\r\n} from '../actions';\r\nimport '../css/components/Ingredient.css';\r\nimport { CardContent, Checkbox } from '@material-ui/core';\r\n\r\n/*\r\n * This is the actual Ingredient card that is rendered.\r\n */\r\nclass Ingredient extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            isSelected: this.props.store.getState().includes(this.props.ingredientName)\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Handles the change in Checked and adds/removes the Ingredient from the Selected List.\r\n     */\r\n    handleChange() {\r\n        this.setState(state => {\r\n            if (!state.isSelected) {\r\n                this.props.store.dispatch(addToSelected(this.props.ingredientName));\r\n            } else {\r\n                this.props.store.dispatch(removeFromSelected(this.props.ingredientName));\r\n            }\r\n            return { isSelected: !state.isSelected };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid item xs={this.props.isMenuLevel2 ? 4 : 3}>\r\n                {this.state.isSelected ? \r\n                    <Card id={this.props.id} onClick={this.handleChange}>\r\n                        <CardContent style={{ background: \"#4db6ac\", color: \"white\", fontWeight: 'bold' }} className=\"Ingredient\">{this.props.ingredientName}</CardContent>\r\n                    </Card> :\r\n                    <Card id={this.props.id} onClick={this.handleChange}>\r\n                        <CardContent className=\"Ingredient\">{this.props.ingredientName}</CardContent>\r\n                    </Card>\r\n                }\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ingredient;\r\n","const SpecifiedIngredientsTasks = JSON.parse(JSON.stringify({\r\n    \"Low_A\": [\r\n        \"Winter Melon\",\r\n        \"Green Onions\",\r\n        \"Green Beans\",\r\n        \"Potatoes\",\r\n        \"Spinach\"\r\n    ],\r\n    \"Low_B\": [\r\n        \"Oyster Mushroom\",\r\n        \"Carrot\",\r\n        \"Chickpea Beans\",\r\n        \"Cauliflower\",\r\n        \"Jalapenos Peppers\"\r\n    ],\r\n    \"Low_C\": [\r\n        \"Lemons\",\r\n        \"Blueberries\",\r\n        \"Watermelon\",\r\n        \"Apples\",\r\n        \"Banana\"\r\n    ],\r\n    \"Low_D\": [\r\n        \"White Rice\",\r\n        \"Pita Bread\",\r\n        \"Ramen Noodles\",\r\n        \"Angel Hair Pasta\",\r\n        \"English Muffins\"\r\n    ],\r\n    \"Low_E\": [\r\n        \"Buttermilk\",\r\n        \"Cream Cheese\",\r\n        \"Cream\",\r\n        \"Colby Cheese\",\r\n        \"Condensed Milk\"\r\n    ],\r\n    \"Low_F\": [\r\n        \"Tequila\",\r\n        \"Cola\",\r\n        \"Lemon/Lime Soda\",\r\n        \"Beer\",\r\n        \"Coffee\"\r\n    ],\r\n    \"Low_G\": [\r\n        \"Pork Roast\",\r\n        \"Corned Beef\",\r\n        \"Roast Beef\",\r\n        \"Turkey Breast\",\r\n        \"Ground Pork\"\r\n    ],\r\n    \"Low_H\": [\r\n        \"Gin\",\r\n        \"Ginger Ale\",\r\n        \"Whiskey\",\r\n        \"Tomato Juice\",\r\n        \"Apple Juice\"\r\n    ],\r\n\t\"Low_I\": [\r\n\t\t\"Crab\",\r\n\t\t\"Scallops\",\r\n\t\t\"Haddock\",\r\n\t\t\"Lobster\",\r\n\t\t\"Squid\"\r\n\t],\r\n    \"High_A\": [\r\n        \"Pork Chops\",\r\n        \"Raspberries\",\r\n        \"Cucumber\",\r\n        \"Chocolate Milk\",\r\n        \"Diet Cola\"\r\n    ],\r\n    \"High_B\": [\r\n        \"Salmon\",\r\n        \"Sweet Potatoes\",\r\n        \"Sliced Chicken\",\r\n        \"Mango\",\r\n        \"Parmesan Cheese\"\r\n    ],\r\n    \"High_C\": [\r\n        \"Pork Tenderloin\",\r\n        \"Peaches\",\r\n        \"Lemonade\",\r\n        \"Whipped Cream\",\r\n        \"Red Peppers\"\r\n    ],\r\n    \"High_D\": [\r\n        \"Black Beans\",\r\n        \"Pears\",\r\n        \"Brandy\",\r\n        \"Chocolate Milk\",\r\n        \"Brisket\"\r\n    ],\r\n    \"High_E\": [\r\n        \"Provelone Cheese\",\r\n        \"Vodka\",\r\n        \"Limes\",\r\n        \"Turkey Legs\",\r\n        \"Bagels\"\r\n    ],\r\n    \"High_F\": [\r\n        \"Instant Coffee\",\r\n        \"Heavy Cream\",\r\n        \"Coconut\",\r\n        \"Turnip\",\r\n        \"Corned Beef\"\r\n    ],\r\n    \"High_G\": [\r\n        \"Bacon\",\r\n        \"Brown Rice\",\r\n        \"Grapes\",\r\n        \"Lemon/Lime Soda\",\r\n        \"Colby Cheese\"\r\n    ],\r\n    \"High_H\": [\r\n        \"Kale\",\r\n        \"Apricots\",\r\n        \"Chicken Breast\",\r\n        \"Cow Milk\",\r\n        \"Fruit Punch\"\r\n    ],\r\n\t\"High_I\": [\r\n\t\t\"Bok Choy\",\r\n\t\t\"Pineapple\",\r\n\t\t\"Feta Cheese\",\r\n\t\t\"Ground Pork\",\r\n\t\t\"Crayfish\"\r\n\t]\r\n}));\r\n\r\nexport default SpecifiedIngredientsTasks;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport SpecifiedIngredientsTasks from '../SpecifiedIngredientsTasks.js'\r\n\r\n/*\r\n * This records the background DVs we want to measure and also acts as a sender to the Google Forms.\r\n */\r\nclass Logging extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Initialise data we are going to log.\r\n        this.startTime = new Date();\r\n        this.totalClicks = 0 - 1; // 1 extra Click for the Submit button.\r\n        if (this.props.menuLevel === 0) {\r\n            this.idealClicks = 5;\r\n        }\r\n        else if (this.props.menuLevel === 1) {\r\n            if (this.props.category_set.includes(\"Low\")) {\r\n                this.idealClicks = 6;\r\n            }\r\n            else if (this.props.category_set.includes(\"High\")) {\r\n                this.idealClicks = 10;\r\n            }\r\n        }\r\n        else if (this.props.menuLevel === 2) {\r\n            this.idealClicks = 3 * 5; // 3 Clicks per Ingredient to find.\r\n        }\r\n\r\n        this.misclicks = -1; // Placeholder Number for now.\r\n        this.specifiedIngredients = SpecifiedIngredientsTasks[this.props.category_set];\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n        this.handleOnClickSendLoggingData = this.handleOnClickSendLoggingData.bind(this);\r\n        this.state = {\r\n            submitted: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    /*\r\n     * Listens for mousedown presses and increments the total number of clicks.\r\n     */\r\n    handleClickOutside(event) {\r\n        this.totalClicks++;\r\n    }\r\n\r\n    /*\r\n     * Sends the logged data to the Google Form.\r\n     */\r\n    handleOnClickSendLoggingData(event) {\r\n        this.setState({ submitted: true });\r\n        this.props.handleSubmitButtonClick();\r\n\r\n        // Retrieve current selected list from store\r\n        let selectedList = this.props.store.getState();\r\n\r\n        // Do not send any logging data if the mTurkWorkerID is null.\r\n        if (this.props.mTurkWorkerID === undefined) {\r\n            return;\r\n        }\r\n\r\n        // Get all the Ingredients that were specified and were selected.\r\n        const ingredientsSpecifiedSelected = selectedList.filter(selectedIngredient => {\r\n            return this.specifiedIngredients.includes(selectedIngredient);\r\n        });\r\n\r\n        // Get all the Ingredients that were specified but were not selected.\r\n        const ingredientsSpecifiedNotSelected = selectedList.filter(selectedIngredient => {\r\n            return !this.specifiedIngredients.includes(selectedIngredient);\r\n        });\r\n\r\n        // Get all the ingredients that were not specified and were still selected.\r\n        const ingredientsNotSpecifiedSelected = selectedList.filter(selectedIngredient => {\r\n            return !this.specifiedIngredients.includes(selectedIngredient);\r\n        });\r\n\r\n        // Sort all ingredient arrays.\r\n        this.specifiedIngredients.sort();\r\n        ingredientsSpecifiedSelected.sort();\r\n        ingredientsSpecifiedNotSelected.sort();\r\n        ingredientsNotSpecifiedSelected.sort();\r\n\r\n        const formID = \"e/1FAIpQLSdG-RITTtCGYcO3LowXhT-9MUYrNtDDvrCNK51fDqtbXJpytQ\";\r\n        const data = {\r\n            \"entry.312909528\": this.props.mTurkWorkerID, // mTurkWorkerID\r\n            \"entry.203482683\": this.props.menuLevel, // Menu Level = { 0, 1, 2 }\r\n            \"entry.1431340849\": this.props.arrangement, // Arrangement = { Alphabetical, Common_First }\r\n            \"entry.975941733\": this.props.category_set, // category_set = { Low_X, High_X }\r\n            \"entry.1597354442\": (new Date() - this.startTime) / 1000, // Time Taken (s)\r\n            \"entry.3846495\": this.totalClicks, // Total number of Clicks\r\n            \"entry.1622141363\": this.misclicks, // Total number of Misclicks\r\n            \"entry.2000979147\": this.idealClicks, // Ideal Clicks to complete the Task\r\n            \"entry.1814249455\": 100 * (1 - Math.abs(this.totalClicks - this.idealClicks) / this.idealClicks), // Click Efficiency (%)\r\n            \"entry.229369407\": (this.specifiedIngredients.length > 0) ? this.specifiedIngredients.join(', ') : \"None\", // Ingredients Specified in the Task\r\n            \"entry.585530140\": (selectedList.length > 0) ? selectedList.join(', ') : \"None\", // Ingredients Selected and Submitted\r\n            \"entry.2093943323\": (ingredientsSpecifiedSelected.length > 0) ? ingredientsSpecifiedSelected.join(', ') : \"None\", // Ingredients Specified that were selected.\r\n            \"entry.108927114\": (ingredientsSpecifiedNotSelected.length > 0) ? ingredientsSpecifiedNotSelected.join(', ') : \"None\",\r\n            \"entry.1280302377\": 100 * (ingredientsSpecifiedSelected.length / this.specifiedIngredients.length), // Ingredients Specified Selected (%).\r\n            \"entry.1304306131\": (ingredientsNotSpecifiedSelected.length > 0) ? ingredientsNotSpecifiedSelected.join(', ') : \"None\", // Ingredients Not Specified that were selected.\r\n            \"entry.44373570\": 100 * ingredientsSpecifiedSelected.length / (selectedList.length + ingredientsSpecifiedNotSelected.length), // Task Correctness (%)\r\n        };\r\n        const parameters = [];\r\n        for (const key in data) {\r\n            parameters.push(key + \"=\" + encodeURIComponent(data[key]));\r\n        }\r\n        // Submit the form using an image to avoid CORS warnings; warning may still happen, but log will be sent. Go check result in Google Form\r\n        const submitForm = new Image();\r\n        submitForm.src = \"https://docs.google.com/forms/d/\" + formID + \"/formResponse?\" + parameters.join(\"&\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Button variant=\"contained\" color=\"primary\" disabled={this.state.submitted} className=\"SubmitButton\" onClick={this.handleOnClickSendLoggingData}>\r\n                Submit\r\n            </Button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Logging;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../css/components/SelectedList.css';\r\nimport { CardContent, Card, ListItem } from '@material-ui/core';\r\n\r\n/*\r\n * This is where the Names of Selected Ingredients are shown.\r\n */\r\nclass SelectedList extends React.Component {\r\n    render() {\r\n        const ingredientNames = this.props.selectedList;\r\n        const ingredientNamesToRender = [];\r\n\r\n        if (ingredientNames.length > 0) {\r\n            for (const [index, ingredientName] of ingredientNames.entries()) {\r\n                ingredientNamesToRender.push(\r\n                    <ListItem key={index} className=\"SelectedListItem\">{ingredientName}</ListItem>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Card className=\"SelectedList\">\r\n                <CardContent>\r\n                    <div className=\"SelectedListTitle\">{ingredientNames.length} Selected</div>\r\n                    {ingredientNamesToRender}\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedList: state\r\n})\r\n\r\nexport default connect(mapStateToProps)(SelectedList);\r\n","import React from 'react';\r\nimport queryString from 'query-string'\r\nimport Ingredient from '../Ingredient.js';\r\nimport Logging from '../Logging.js';\r\nimport SelectedList from '../SelectedList.js';\r\nimport { Grid, Box, Modal, Button } from '@material-ui/core';\r\nimport '../../css/components/Modal.css';\r\n\r\nclass MenuLevel0 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /*\r\n         * Extract out the query string parameters.\r\n         * Type in: http://localhost:3000/MenuLevel0?Arrangement=Alphabetical&Categories=Low_A&mTurkWorkerID=ABC\r\n         * Expected: Alphabetical, Low_A, ABC\r\n         */\r\n        const queryStringParameters = queryString.parse(this.props.location.search);\r\n        if (Object.entries(queryStringParameters).length !== 0) {\r\n            this.arrangement = queryStringParameters.Arrangement; // Alphabetical or Common\r\n            this.category_set = queryStringParameters.Categories;\r\n            this.mTurkWorkerID = queryStringParameters.mTurkWorkerID;\r\n        }\r\n\r\n        this.categories = Object.keys(this.props.ingredients);\r\n        if (this.arrangement === \"Alphabetical\") {\r\n            this.categories.sort();\r\n        }\r\n\r\n        this.state = {\r\n            InstructionModalOpen: true,\r\n            SubmitModalOpen: false,\r\n        }\r\n    }\r\n\r\n    handleStartButtonClick() {\r\n        this.setState({\r\n            InstructionModalOpen: false,\r\n        });\r\n    }\r\n\r\n    handleSubmitButtonClick() {\r\n        this.setState({\r\n            SubmitModalOpen: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const componentsToRender = [];\r\n        let ingredientIndex = 0;\r\n\r\n        // Create the Ingredient Components at the 0-Level\r\n        for (const category of this.categories) {\r\n            // First we create the Category title.\r\n            componentsToRender.push(\r\n                <div key={category} className=\"CategoryTitle\">{category}</div>\r\n            );\r\n\r\n            // Then we simply add all the ingredients under that Category.\r\n            const ingredientsPerCategory = [];\r\n            for (const subcategory in this.props.ingredients[category]) {\r\n                for (const ingredientName of this.props.ingredients[category][subcategory]) {\r\n                    ingredientsPerCategory.push(ingredientName);\r\n                }\r\n            }\r\n            // Sort them\r\n            ingredientsPerCategory.sort();\r\n\r\n            // Then add to the list of ingredient components\r\n            for (const ingredientName of ingredientsPerCategory) {\r\n                componentsToRender.push(\r\n                    <Ingredient key={ingredientIndex} ingredientName={ingredientName} id={ingredientIndex} store={this.props.store} />\r\n                );\r\n                ingredientIndex++;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Box>\r\n                <Modal open={this.state.InstructionModalOpen}>\r\n                    <div className=\"OverlayModal\">\r\n                        <p>When you click <b>Start</b>, the interface for the task will be revealed.</p>\r\n                        <div style={{ marginBottom: \"32px\" }}>Click <b>Start</b> when you are ready!</div>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleStartButtonClick.bind(this)}>Start</Button>\r\n                    </div>\r\n                </Modal>\r\n                <Modal open={this.state.SubmitModalOpen}>\r\n                    <div className=\"OverlayModal\">\r\n                        <p>You have completed this task! Continue with the survey.</p>\r\n                    </div>\r\n                </Modal>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={9}>\r\n                        <Grid container spacing={2}>\r\n                            {componentsToRender}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <div style={{ position: \"fixed\", width: \"22.5%\" }}>\r\n                            <SelectedList store={this.props.store} />\r\n                            {!this.state.InstructionModalOpen ? <Logging mTurkWorkerID={this.mTurkWorkerID} store={this.props.store} menuLevel={0} arrangement={this.arrangement} category_set={this.category_set} handleSubmitButtonClick={this.handleSubmitButtonClick.bind(this)} /> : null}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuLevel0;\r\n","import React from 'react';\r\nimport queryString from 'query-string'\r\nimport { AppBar, Box, Grid, Tab, Tabs, Modal, Button } from '@material-ui/core';\r\nimport Ingredient from '../Ingredient';\r\nimport Logging from '../Logging.js';\r\nimport SelectedList from '../SelectedList.js';\r\nimport '../../css/components/Modal.css';\r\n\r\nclass MenuLevel1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            category: false,\r\n            InstructionModalOpen: true,\r\n            SubmitModalOpen: false,\r\n        };\r\n\r\n        /*\r\n         * Extract out the query string parameters.\r\n         * Type in: http://localhost:3000/MenuLevel0?Arrangement=Alphabetical&Categories=Low_A&mTurkWorkerID=ABC\r\n         * Expected: Alphabetical, Low_A, ABC\r\n         */\r\n        const queryStringParameters = queryString.parse(this.props.location.search);\r\n        if (Object.entries(queryStringParameters).length !== 0) {\r\n            this.arrangement = queryStringParameters.Arrangement;\r\n            this.category_set = queryStringParameters.Categories;\r\n            this.mTurkWorkerID = queryStringParameters.mTurkWorkerID;\r\n        }\r\n\r\n        this.categories = Object.keys(this.props.ingredients);\r\n        if (this.arrangement === \"Alphabetical\") {\r\n            this.categories.sort();\r\n        }\r\n        // this.state.category = this.categories[0];\r\n\r\n        this.handleChangeCategoryTab = this.handleChangeCategoryTab.bind(this);\r\n    }\r\n\r\n    handleStartButtonClick() {\r\n        this.setState({\r\n            InstructionModalOpen: false,\r\n        });\r\n    }\r\n\r\n    handleSubmitButtonClick() {\r\n        this.setState({\r\n            SubmitModalOpen: true,\r\n        })\r\n    }\r\n\r\n    /*\r\n     * Handles the change in Category and shows the correct Category content.\r\n     */\r\n    handleChangeCategoryTab(event, newCategory) {\r\n        this.setState(state => {\r\n            return { category: newCategory }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const categoryTabLabelsToRender = [];\r\n        const componentsInCategoryToRender = [];\r\n        let categoryIndex = 0;\r\n        let ingredientIndex = 0;\r\n        const categories = Object.keys(this.props.ingredients);\r\n\r\n        if (this.arrangement === \"Alphabetical\") {\r\n            categories.sort();\r\n        }\r\n\r\n        // Create the Ingredient Components at the 1-Level\r\n        for (const category of categories) {\r\n            // First we create the Category Tab.\r\n            categoryTabLabelsToRender.push(\r\n                <Tab style={{minWidth: 110, width: 110}} key={categoryIndex} value={category} index={category} label={category} />\r\n            );\r\n\r\n            // Only (re)render components of the currently selected category\r\n            if (category === this.state.category) {\r\n                // Then we get all the Ingredients under that Category.\r\n                let ingredientsPerCategory = [];\r\n                const ingredientsToRender = [];\r\n\r\n                for (const subcategory in this.props.ingredients[category]) {\r\n                    for (const ingredientName of this.props.ingredients[category][subcategory]) {\r\n                        ingredientsPerCategory.push(ingredientName);\r\n                    }\r\n                }\r\n                // Sort them\r\n                ingredientsPerCategory.sort();\r\n\r\n                // Then add to the list of ingredient components\r\n                for (const ingredientName of ingredientsPerCategory) {\r\n                    ingredientsToRender.push(\r\n                        <Ingredient key={ingredientIndex} ingredientName={ingredientName} id={ingredientIndex} store={this.props.store} />\r\n                    );\r\n                    ingredientIndex++;\r\n                }\r\n\r\n                // Finally we add all Ingredients to the Category content; this only gets shown if we click the Category Tab.\r\n                componentsInCategoryToRender.push(\r\n                    <div className=\"CategoryTab\" key={categoryIndex} value={category} index={category} hidden={this.state.category !== category}>\r\n                        <Grid container spacing={2}>\r\n                            {ingredientsToRender}\r\n                        </Grid>\r\n                    </div>\r\n                );\r\n            }\r\n            categoryIndex++;\r\n        }\r\n\r\n        return (\r\n            <Box>\r\n                <Modal open={this.state.InstructionModalOpen}>\r\n                    <div className=\"OverlayModal\">\r\n                        <p>When you click <b>Start</b>, the interface for the task will be revealed.</p>\r\n                        <div style={{ marginBottom: \"32px\" }}>Click <b>Start</b> when you are ready!</div>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleStartButtonClick.bind(this)}>Start</Button>\r\n                    </div>\r\n                </Modal>\r\n                <Modal open={this.state.SubmitModalOpen}>\r\n                    <div className=\"OverlayModal\">\r\n                        <p>You have completed this task! Continue with the survey.</p>\r\n                    </div>\r\n                </Modal>\r\n                <AppBar position=\"fixed\">\r\n                    <Tabs TabIndicatorProps={{style: {background: '#fff'}}} value={this.state.category} onChange={this.handleChangeCategoryTab}>\r\n                        {categoryTabLabelsToRender}\r\n                    </Tabs>\r\n                </AppBar>\r\n                <div className=\"AppBarOffset\"></div>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={9}>\r\n                        {componentsInCategoryToRender}\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <SelectedList store={this.props.store} />\r\n                        {!this.state.InstructionModalOpen ? <Logging mTurkWorkerID={this.mTurkWorkerID} store={this.props.store} menuLevel={1} arrangement={this.arrangement} category_set={this.category_set} handleSubmitButtonClick={this.handleSubmitButtonClick.bind(this)} /> : null}\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuLevel1;\r\n","import React from 'react';\r\nimport queryString from 'query-string'\r\nimport { AppBar, Box, Grid, Tab, Tabs, Modal, Button, Menu, MenuItem, Popper } from '@material-ui/core';\r\nimport Ingredient from '../Ingredient.js';\r\nimport Logging from '../Logging.js';\r\nimport SelectedList from '../SelectedList.js';\r\nimport '../../css/components/Modal.css';\r\n\r\nclass MenuLevel2 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            category: false,\r\n            subcategory: false,\r\n            InstructionModalOpen: true,\r\n            SubmitModalOpen: false,\r\n            anchorEl: null,\r\n        };\r\n\r\n        /*\r\n         * Extract out the query string parameters.\r\n         * Type in: http://localhost:3000/MenuLevel0?Arrangement=Alphabetical&Categories=Low_A&mTurkWorkerID=ABC\r\n         * Expected: Alphabetical, Low_A, ABC\r\n         */\r\n        const queryStringParameters = queryString.parse(this.props.location.search);\r\n        if (Object.entries(queryStringParameters).length !== 0) {\r\n            this.arrangement = queryStringParameters.Arrangement;\r\n            this.category_set = queryStringParameters.Categories;\r\n            this.mTurkWorkerID = queryStringParameters.mTurkWorkerID;\r\n        }\r\n\r\n        this.categories = Object.keys(this.props.ingredients);\r\n        if (this.arrangement === \"Alphabetical\") {\r\n            this.categories.sort();\r\n        }\r\n        // this.state.category = this.categories[0];\r\n\r\n        this.handleChangeCategoryTab = this.handleChangeCategoryTab.bind(this);\r\n        this.handleChangeSubcategory = this.handleChangeSubcategory.bind(this);\r\n        this.handleMenuClose = this.handleMenuClose.bind(this);\r\n    }\r\n\r\n    handleStartButtonClick() {\r\n        this.setState({\r\n            InstructionModalOpen: false,\r\n        });\r\n    }\r\n\r\n    handleSubmitButtonClick() {\r\n        this.setState({\r\n            SubmitModalOpen: true,\r\n        })\r\n    }\r\n\r\n    /*\r\n     * Handles the change in Category and shows the correct Category content.\r\n     */\r\n    handleChangeCategoryTab(event, newCategory) {\r\n        this.setState({\r\n            category: newCategory,\r\n            anchorEl: event.currentTarget,\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Handles the change in Subategory and shows the correct subcategory content.\r\n     */\r\n    handleChangeSubcategory(newSubcategory) {\r\n        this.setState({\r\n            subcategory: newSubcategory,\r\n            anchorEl: null,\r\n        });\r\n    }\r\n\r\n    handleMenuClose(event) {\r\n        this.setState({\r\n            anchorEl: null,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let categoryIndex = 0;\r\n        let subcategoryIndex = 0;\r\n        let ingredientIndex = 0;\r\n\r\n        const categoryTabLabelsToRender = [];\r\n        const componentsInCategoryToRender = [];\r\n        const subcategoryMenus = [];\r\n\r\n        // Create the Ingredient Components at the 1-Level\r\n        for (const category of this.categories) {\r\n            // First we create the Category Tab.\r\n            categoryTabLabelsToRender.push(\r\n                <Tab style={{minWidth: 110, width: 110}} key={categoryIndex} value={category} index={category} label={category} />\r\n            );\r\n\r\n            if (category === this.state.category) {\r\n                const subcategoryMenuItems = [];\r\n                const componentsInSubcategoryToRender = [];\r\n\r\n                // Sort the subcategories according to the arrangement\r\n                const subcategories = Object.keys(this.props.ingredients[category]);\r\n                if (this.arrangement === \"Alphabetical\") {\r\n                    subcategories.sort();\r\n                }\r\n\r\n                // We get all the subcategories under the Category\r\n                for (const subcategory of subcategories) {\r\n\r\n                    // Generate the menu items (subcategories)\r\n                    subcategoryMenuItems.push(\r\n                        <MenuItem \r\n                            style={ this.state.subcategory === subcategory ? { height: 70, width: 250, fontWeight: 'bold', color: '#3f51b5' } : { height: 70, width: 250 } }\r\n                            key={subcategory}\r\n                            onClick={() => this.handleChangeSubcategory(subcategory)}>{subcategory}\r\n                        </MenuItem>\r\n                    );\r\n\r\n                    if(subcategory === this.state.subcategory){\r\n                        const ingredientsToRender = [];\r\n                        this.props.ingredients[category][subcategory].sort();\r\n                        // Then we get all the Ingredients under that Subategory.\r\n                            for (const ingredientName of this.props.ingredients[category][subcategory]) {\r\n                                ingredientsToRender.push(\r\n                                    <Ingredient key={ingredientIndex} ingredientName={ingredientName} id={ingredientIndex} store={this.props.store} isMenuLevel2={true} />\r\n                                )\r\n                                ingredientIndex++;\r\n                            }\r\n\r\n                            componentsInSubcategoryToRender.push(\r\n                                <div className=\"SubcategoryTab\" key={subcategoryIndex} value={subcategory} index={subcategory} hidden={this.state.subcategory !== subcategory}>\r\n                                    <Grid container spacing={2}>\r\n                                        {ingredientsToRender}\r\n                                    </Grid>\r\n                                </div>\r\n                            );\r\n                    }\r\n                    subcategoryIndex++;\r\n                }\r\n\r\n                // Finally we add all Ingredients to the Category content; this only gets shown if we click the Category Tab.\r\n                componentsInCategoryToRender.push(\r\n                    <div className=\"CategoryTab\" key={categoryIndex} value={category} index={category} hidden={this.state.category !== category}>\r\n                        {componentsInSubcategoryToRender}\r\n                    </div>\r\n                );\r\n\r\n                // Generate the higher order menu component containing the subcategory menu items\r\n                subcategoryMenus.push(\r\n                        <Menu\r\n                            key={category}\r\n                            getContentAnchorEl={null}\r\n                            anchorEl={this.state.anchorEl}\r\n                            open={Boolean(this.state.anchorEl)}\r\n                            onClose={this.handleMenuClose}\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'center',\r\n                            }}\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'center',\r\n                            }}\r\n                            >\r\n                            {subcategoryMenuItems}\r\n                        </Menu>\r\n                );\r\n            }\r\n            categoryIndex++;\r\n        }\r\n\r\n        return (\r\n            <Box>\r\n                <Modal open={this.state.InstructionModalOpen}>\r\n                    <div className=\"OverlayModal\">\r\n                        <p>When you click <b>Start</b>, the interface for the task will be revealed.</p>\r\n                        <div style={{ marginBottom: \"32px\" }}>Click <b>Start</b> when you are ready!</div>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleStartButtonClick.bind(this)}>Start</Button>\r\n                    </div>\r\n                </Modal>\r\n\r\n                <Modal open={this.state.SubmitModalOpen}>\r\n                    <div className=\"OverlayModal\">\r\n                        <p>You have completed this task! Continue with the survey.</p>\r\n                    </div>\r\n                </Modal>\r\n\r\n                {subcategoryMenus}\r\n\r\n                <AppBar position=\"fixed\">\r\n                    <Tabs TabIndicatorProps={{style: {background: '#fff'}}} value={this.state.category} onChange={this.handleChangeCategoryTab}>\r\n                        {categoryTabLabelsToRender}\r\n                    </Tabs>\r\n                </AppBar>\r\n\r\n                <div className=\"AppBarOffset\"></div>\r\n\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={9}>\r\n                        {componentsInCategoryToRender}\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <SelectedList store={this.props.store} />\r\n                        {!this.state.InstructionModalOpen ? <Logging mTurkWorkerID={this.mTurkWorkerID} store={this.props.store} menuLevel={2} arrangement={this.arrangement} category_set={this.category_set} handleSubmitButtonClick={this.handleSubmitButtonClick.bind(this)} /> : null}\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuLevel2;\r\n","import React from 'react';\r\nimport queryString from 'query-string'\r\nimport Box from '@material-ui/core/Box';\r\nimport SpecifiedIngredientsTasks from '../SpecifiedIngredientsTasks.js'\r\nimport '../css/SpecifiedIngredientsTasks.css';\r\n\r\n/*\r\n * This records the background DVs we want to measure and also acts as a sender to the Google Forms.\r\n * Type in: http://localhost:3000/InstructionTask?Categories=Low_B\r\n * Expected: Select the following ingredients: Garlic, Carrot, Portabello, Cauliflower, Jalapenos Peppers.\r\n */\r\nclass SpecifiedIngredientsTask extends React.Component {\r\n    render() {\r\n        const queryStringParameters = queryString.parse(this.props.location.search);\r\n        const specifiedIngredients = SpecifiedIngredientsTasks[queryStringParameters.Categories];\r\n        let instructionToRender = [];\r\n        instructionToRender.push(<p>Select the following ingredients (the order does not matter):</p>)\r\n\r\n        // Randomise the Ingredients' order.\r\n        specifiedIngredients.sort(() => Math.random() - 0.5);\r\n\r\n        // Append the Ingredients to the instruction string.\r\n        for (const specifiedIngredient of specifiedIngredients) {\r\n            instructionToRender.push(<li className=\"SpecifiedIngredient\">{specifiedIngredient}</li>);\r\n        }\r\n\r\n        return (\r\n            <Box className=\"InstructionToRender\">\r\n                <link href=\"https://fonts.googleapis.com/css?family=Poppins&display=swap\" rel=\"stylesheet\"></link>\r\n                {instructionToRender}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SpecifiedIngredientsTask;","const Ingredients = JSON.parse(JSON.stringify({\r\n    \"Vegetables\": {\r\n        \"Leafy Greens\": [\r\n            \"Bok Choy\",\r\n            \"Spinach\",\r\n            \"Lettuce\",\r\n            \"Brussel Sprouts\",\r\n            \"Cabbage\",\r\n            \"Kale\"\r\n        ],\r\n        \"Flowers\": [\r\n            \"Artichokes\",\r\n            \"Broccoli\",\r\n            \"Cauliflower\"\r\n        ],\r\n        \"Marrow/Gourds\": [\r\n            \"Bitter Gourd\",\r\n            \"Winter Melon\",\r\n            \"Cucumber\",\r\n            \"Butternut Squash\",\r\n            \"Eggplant\",\r\n            \"Pumpkin\",\r\n            \"Zucchini\"\r\n        ],\r\n        \"Legumes/Seeds\": [\r\n            \"Sweet Corn\",\r\n            \"Green Beans\",\r\n            \"French Beans\",\r\n            \"Long Beans\",\r\n            \"Peas\",\r\n            \"Snow Peas\",\r\n            \"Black Beans\",\r\n            \"Chickpea Beans\",\r\n            \"Kidney Beans\",\r\n            \"Lima Beans\"\r\n        ],\r\n        \"Peppers\": [\r\n            \"Red Chilis\",\r\n            \"Green Chilis\",\r\n            \"Green Peppers\",\r\n            \"Jalapenos Peppers\",\r\n            \"Red Peppers\",\r\n            \"Yellow Peppers\"\r\n        ],\r\n        \"Potato, Onions And Roots\": [\r\n            \"Beetroot\",\r\n            \"Carrot\",\r\n            \"Turnip\",\r\n            \"Daikon\",\r\n            \"Garlic\",\r\n            \"Green Onions\",\r\n            \"Potatoes\",\r\n            \"Shallots\",\r\n            \"Radish\",\r\n            \"Sweet Potatoes\",\r\n            \"Yam\"\r\n        ],\r\n        \"Fungi\": [\r\n            \"Button White Mushroom\",\r\n            \"Swiss Brown Mushroom\",\r\n            \"Enoki Mushroom\",\r\n            \"Oyster Mushroom\",\r\n            \"Portabello Mushroom\",\r\n            \"Shiitake Mushroom\",\r\n            \"Truffle Mushroom\"\r\n        ]\r\n    },\r\n    \"Fruits\": {\r\n        \"Apples and Pears\": [\r\n            \"Apples\",\r\n            \"Pears\"\r\n        ],\r\n        \"Citrus\": [\r\n            \"Grapefruit\",\r\n            \"Lemons\",\r\n            \"Limes\",\r\n            \"Oranges\"\r\n        ],\r\n        \"Stone Fruits\": [\r\n            \"Apricots\",\r\n            \"Peaches\",\r\n            \"Plums\",\r\n            \"Black Olives\",\r\n            \"Green Olives\"\r\n        ],\r\n        \"Tropical\": [\r\n            \"Avocado\",\r\n            \"Banana\",\r\n            \"Coconut\",\r\n            \"Mango\",\r\n            \"Pineapple\"\r\n        ],\r\n        \"Berries\": [\r\n            \"Cherries\",\r\n            \"Cranberries\",\r\n            \"Grapes\",\r\n            \"Strawberries\",\r\n            \"Blueberries\",\r\n            \"Mulberries\",\r\n            \"Raspberries\"\r\n        ],\r\n        \"Melons\": [\r\n            \"Honeydew Melon\",\r\n            \"Rock Melon\",\r\n            \"Watermelon\"\r\n        ],\r\n        \"Tomatoes\": [\r\n            \"Cherry Tomatoes\",\r\n            \"Tomatoes\"\r\n        ]\r\n    },\r\n    \"Dairy\": {\r\n        \"Cheese\": [\r\n            \"Blue Cheese\",\r\n            \"Cheddar Cheese\",\r\n            \"Colby Cheese\",\r\n            \"Cream Cheese\",\r\n            \"Feta Cheese\",\r\n            \"Goat Cheese\",\r\n            \"Monteray jack Cheese\",\r\n            \"Mozzarella Cheese\",\r\n            \"Parmesan Cheese\",\r\n            \"Provelone Cheese\",\r\n            \"Ricotta Cheese\",\r\n            \"Romano Cheese\",\r\n            \"Swiss Cheese\"\r\n        ],\r\n        \"Cream\": [\r\n            \"Cream\",\r\n            \"Heavy Cream\",\r\n            \"Sour Cream\",\r\n            \"Whipped Cream\"\r\n        ],\r\n        \"Milk\": [\r\n            \"Cow Milk\",\r\n            \"Buttermilk\",\r\n            \"Chocolate Milk\",\r\n            \"Condensed Milk\",\r\n            \"Evaporated Milk\",\r\n            \"Half and Half\"\r\n        ]\r\n    },\r\n    \"Meats\": {\r\n        \"Beef\": [\r\n            \"Brisket\",\r\n            \"Corned Beef\",\r\n            \"Ground Beef\",\r\n            \"Ground Veal\",\r\n            \"Roast Beef\",\r\n            \"Steak\"\r\n        ],\r\n        \"Poultry\": [\r\n            \"Canned Chicken\",\r\n            \"Chicken Breast\",\r\n            \"Sliced Chicken\",\r\n            \"Turkey Breast\",\r\n            \"Turkey Legs\"\r\n        ],\r\n        \"Pork\": [\r\n            \"Bacon\",\r\n            \"Ground Pork\",\r\n            \"Ham\",\r\n            \"Pepperoni\",\r\n            \"Pork Chops\",\r\n            \"Pork Roast\",\r\n            \"Pork Tenderloin\",\r\n            \"Prosciutto\",\r\n            \"Salami\"\r\n        ]\r\n    },\r\n    \"Seafood\": {\r\n        \"Fish\": [\r\n            \"Canned Tuna\",\r\n            \"Catfish\",\r\n            \"Cod\",\r\n            \"Haddock\",\r\n            \"Salmon\",\r\n            \"Tilapia\",\r\n            \"Tuna\"\r\n        ],\r\n        \"Crustaceans\": [\r\n            \"Crayfish\",\r\n            \"Crab\",\r\n            \"Lobster\",\r\n            \"Prawns\",\r\n            \"Shrimp\"\r\n        ],\r\n        \"Molluscs/Clams\": [\r\n            \"Clams\",\r\n            \"Cockles\",\r\n            \"Mussels\",\r\n            \"Octupus\",\r\n            \"Scallops\",\r\n            \"Squid\"\r\n        ]\r\n    },\r\n    \"Carbs\": {\r\n        \"Grain/Rice\": [\r\n            \"Barley\",\r\n            \"Black Rice\",\r\n            \"Brown Rice\",\r\n            \"Granola\",\r\n            \"Oats/Oatmeal\",\r\n            \"White Rice\",\r\n            \"Wild Rice\"\r\n        ],\r\n        \"Pasta/Noodles\": [\r\n            \"Angel Hair Pasta\",\r\n            \"Bowtie Pasta\",\r\n            \"Egg Noodles\",\r\n            \"Elbow Macaroni Pasta\",\r\n            \"Fettuccine Noodles\",\r\n            \"Gnocchi\",\r\n            \"Ramen Noodles\",\r\n            \"Shell Noodles\",\r\n            \"Spaghetti Pasta\",\r\n        ],\r\n        \"Bread\": [\r\n            \"Bagels\",\r\n            \"Buns\",\r\n            \"Corn Bread\",\r\n            \"English Muffins\",\r\n            \"Flat Bread\",\r\n            \"French Bread\",\r\n            \"Italian Bread\",\r\n            \"Pita Bread\",\r\n            \"Rolls/Biscuits\",\r\n            \"Rye Bread\",\r\n            \"Wheat Grain Bread\",\r\n            \"White Bread\"\r\n        ]\r\n    },\r\n    \"Beverages\": {\r\n        \"Liquor\": [\r\n            \"Apple Cider\",\r\n            \"Club/Tonic\",\r\n            \"Baileys\",\r\n            \"Beer\",\r\n            \"Brandy\",\r\n            \"Gin\",\r\n            \"Kahlua\",\r\n            \"Pale Ale\",\r\n            \"Rum\",\r\n            \"Stout\",\r\n            \"Tequila\",\r\n            \"Vodka\",\r\n            \"Whiskey\"\r\n        ],\r\n        \"Juice\": [\r\n            \"Apple Juice\",\r\n            \"Lemonade\",\r\n            \"Orange Juice\",\r\n            \"Pineapple Juice\",\r\n            \"Tomato Juice\"\r\n        ],\r\n        \"Soft Drinks\": [\r\n            \"Cola\",\r\n            \"Diet Cola\",\r\n            \"Fruit Punch\",\r\n            \"Ginger Ale\",\r\n            \"Lemon/Lime Soda\"\r\n        ],\r\n        \"Coffee\": [\r\n            \"Coffee\",\r\n            \"Instant Coffee\"\r\n        ]\r\n    }\r\n}));\r\n\r\nexport default Ingredients;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport { createStore } from 'redux';\r\nimport selectList from './reducers';\r\nimport MenuLevel0 from './components/menu_levels/MenuLevel0.js';\r\nimport MenuLevel1 from './components/menu_levels/MenuLevel1.js';\r\nimport MenuLevel2 from './components/menu_levels/MenuLevel2.js';\r\nimport SpecifiedIngredientsTask from './components/SpecifiedIngredientsTask.js';\r\nimport './css/App.css';\r\nimport Ingredients from './Ingredients.js';\r\n\r\nconst store = createStore(selectList);\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ingredients = Ingredients; // Import the Ingredients JSON File.\r\n    }\r\n\r\n    render() {\r\n        window.addEventListener(\"keydown\", function (e) {\r\n            if (e.keyCode === 116 || e.keyCode === 114 || (e.ctrlKey && (e.keyCode === 70 || e.keycode === 82))) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n\r\n        return (\r\n            <Router basename={process.env.PUBLIC_URL}>\r\n                <Switch>\r\n                    <Route path=\"/MenuLevel0\" render={(props) => <MenuLevel0 {...props} store={store} ingredients={this.ingredients} />} />\r\n                    <Route path=\"/MenuLevel2\" render={(props) => <MenuLevel2 {...props} store={store} ingredients={this.ingredients} />} />\r\n                    <Route path=\"/MenuLevel1\" render={(props) => <MenuLevel1 {...props} store={store} ingredients={this.ingredients} />} />\r\n                    <Route path=\"/InstructionTask\" render={(props => <SpecifiedIngredientsTask {...props} />)} />\r\n                </Switch>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App.js';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport './css/index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}